// Copyright 2022 Contributors to the Veraison project.
// SPDX-License-Identifier: Apache-2.0

/// Demonstrates use of the Veraison verification API from Rust code in order to verify and evaluate
/// a CCA attestation token.
///
/// The program runs stand-alone without any command-line arguments. The CCA attestation token is
/// bundled into the source code as a byte array, along with the matching challenge value.
/// 
/// By default, this program uses the public Veraison instance that is maintained by Linaro. This
/// means that you can run the program exactly as it is without any prior set-up.
///
/// If you wish to use your own Veraison deployment as the verifier, rather than the one provided
/// by Linaro, some additional set-up steps are needed, and these are described below.
/// 
/// First of all, you need to deploy Veraison and publish its verification API endpoint on port 8080
/// on localhost. The easiest way to achieve that is by using the out-of-box Docker deployment of
/// Veraison, which is described in the Getting Started guide here: https://github.com/veraison/services
///
/// The second prerequisite is to provide some demo CCA endorsements to Veraison. To do this, use
/// the end-to-end test scripts documented here: https://github.com/veraison/services/tree/main/end-to-end
///
/// Follow the steps up to and including "Provision endorsements and trust anchors".
///
/// Ensure that you have the environment variable `SCHEME` set to `cca` when you run the
/// provisioning script.
///
/// Once these set-up steps are complete, the program below should work. The CCA attestation token
/// that is inlined into this source code is the same one that Veraison's end-to-end test scripts
/// use. Therefore, the endorsements and reference values will match the token, and the verification
/// process should succeed and produce an affirmitive result.
use ear::{Algorithm, Ear};
use veraison_apiclient::*;

fn my_evidence_builder(nonce: &[u8], accept: &[String]) -> Result<(Vec<u8>, String), Error> {
    println!("server challenge: {:?}", nonce);
    println!("acceptable media types: {:#?}", accept);

    Ok((
        // CCA evidence from https://git.trustedfirmware.org/TF-M/tf-m-tools/+/refs/heads/main/iat-verifier/tests/data/cca_example_token.cbor
        vec![
            0xd9, 0x01, 0x8f, 0xa2, 0x19, 0xac, 0xca, 0x59, 0x05, 0xe7, 0xd2, 0x84, 0x44, 0xa1,
            0x01, 0x38, 0x22, 0xa0, 0x59, 0x05, 0x7a, 0xa9, 0x19, 0x01, 0x09, 0x78, 0x1c, 0x68,
            0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
            0x43, 0x43, 0x41, 0x2d, 0x53, 0x53, 0x44, 0x2f, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x0a,
            0x58, 0x20, 0xb5, 0x97, 0x3c, 0xb6, 0x8b, 0xaa, 0x9f, 0xc5, 0x55, 0x58, 0x78, 0x6b,
            0x7e, 0xc6, 0x7f, 0x69, 0xe4, 0x0d, 0xf5, 0xba, 0x5a, 0xa9, 0x21, 0xcd, 0x0c, 0x27,
            0xf4, 0x05, 0x87, 0xa0, 0x11, 0xea, 0x19, 0x09, 0x5c, 0x58, 0x20, 0x7f, 0x45, 0x4c,
            0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
            0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x19, 0x01, 0x00, 0x58, 0x21, 0x01, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
            0x00, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x17, 0x16, 0x15, 0x14, 0x13,
            0x12, 0x11, 0x10, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x19, 0x09, 0x61,
            0x44, 0xcf, 0xcf, 0xcf, 0xcf, 0x19, 0x09, 0x5b, 0x19, 0x30, 0x03, 0x19, 0x09, 0x62,
            0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0x19, 0x09, 0x60, 0x78, 0x3a, 0x68,
            0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x69, 0x73, 0x6f,
            0x6e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x2e, 0x77, 0x65, 0x6c,
            0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x69, 0x73,
            0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
            0x6e, 0x19, 0x09, 0x5f, 0x8d, 0xa4, 0x01, 0x69, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x4c,
            0x31, 0x5f, 0x32, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3,
            0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60,
            0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x9a,
            0x27, 0x1f, 0x2a, 0x91, 0x6b, 0x0b, 0x6e, 0xe6, 0xce, 0xcb, 0x24, 0x26, 0xf0, 0xb3,
            0x20, 0x6e, 0xf0, 0x74, 0x57, 0x8b, 0xe5, 0x5d, 0x9b, 0xc9, 0x4f, 0x6f, 0x3f, 0xe3,
            0xab, 0x86, 0xaa, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01,
            0x67, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x4c, 0x32, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79,
            0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41,
            0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a,
            0xa3, 0x02, 0x58, 0x20, 0x53, 0xc2, 0x34, 0xe5, 0xe8, 0x47, 0x2b, 0x6a, 0xc5, 0x1c,
            0x1a, 0xe1, 0xca, 0xb3, 0xfe, 0x06, 0xfa, 0xd0, 0x53, 0xbe, 0xb8, 0xeb, 0xfd, 0x89,
            0x77, 0xb0, 0x10, 0x65, 0x5b, 0xfd, 0xd3, 0xc3, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d,
            0x32, 0x35, 0x36, 0xa4, 0x01, 0x65, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x05, 0x58, 0x20,
            0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2,
            0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa,
            0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x11, 0x21, 0xcf, 0xcc, 0xd5, 0x91, 0x3f,
            0x0a, 0x63, 0xfe, 0xc4, 0x0a, 0x6f, 0xfd, 0x44, 0xea, 0x64, 0xf9, 0xdc, 0x13, 0x5c,
            0x66, 0x63, 0x4b, 0xa0, 0x01, 0xd1, 0x0b, 0xcf, 0x43, 0x02, 0xa2, 0x06, 0x67, 0x73,
            0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01, 0x66, 0x41, 0x50, 0x5f, 0x42, 0x4c,
            0x31, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d,
            0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3,
            0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x15, 0x71, 0xb5,
            0xec, 0x78, 0xbd, 0x68, 0x51, 0x2b, 0xf7, 0x83, 0x0b, 0xb6, 0xa2, 0xa4, 0x4b, 0x20,
            0x47, 0xc7, 0xdf, 0x57, 0xbc, 0xe7, 0x9e, 0xb8, 0xa1, 0xc0, 0xe5, 0xbe, 0xa0, 0xa5,
            0x01, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01, 0x66, 0x41,
            0x50, 0x5f, 0x42, 0x4c, 0x32, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53,
            0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d,
            0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58,
            0x20, 0x10, 0x15, 0x9b, 0xaf, 0x26, 0x2b, 0x43, 0xa9, 0x2d, 0x95, 0xdb, 0x59, 0xda,
            0xe1, 0xf7, 0x2c, 0x64, 0x51, 0x27, 0x30, 0x16, 0x61, 0xe0, 0xa3, 0xce, 0x4e, 0x38,
            0xb2, 0x95, 0xa9, 0x7c, 0x58, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36,
            0xa4, 0x01, 0x67, 0x53, 0x43, 0x50, 0x5f, 0x42, 0x4c, 0x31, 0x05, 0x58, 0x20, 0x53,
            0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc,
            0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97,
            0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x10, 0x12, 0x2e, 0x85, 0x6b, 0x3f, 0xcd, 0x49,
            0xf0, 0x63, 0x63, 0x63, 0x17, 0x47, 0x61, 0x49, 0xcb, 0x73, 0x0a, 0x1a, 0xa1, 0xcf,
            0xaa, 0xd8, 0x18, 0x55, 0x2b, 0x72, 0xf5, 0x6d, 0x6f, 0x68, 0x06, 0x67, 0x73, 0x68,
            0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01, 0x67, 0x53, 0x43, 0x50, 0x5f, 0x42, 0x4c,
            0x32, 0x05, 0x58, 0x20, 0xf1, 0x4b, 0x49, 0x87, 0x90, 0x4b, 0xcb, 0x58, 0x14, 0xe4,
            0x45, 0x9a, 0x05, 0x7e, 0xd4, 0xd2, 0x0f, 0x58, 0xa6, 0x33, 0x15, 0x22, 0x88, 0xa7,
            0x61, 0x21, 0x4d, 0xcd, 0x28, 0x78, 0x0b, 0x56, 0x02, 0x58, 0x20, 0xaa, 0x67, 0xa1,
            0x69, 0xb0, 0xbb, 0xa2, 0x17, 0xaa, 0x0a, 0xa8, 0x8a, 0x65, 0x34, 0x69, 0x20, 0xc8,
            0x4c, 0x42, 0x44, 0x7c, 0x36, 0xba, 0x5f, 0x7e, 0xa6, 0x5f, 0x42, 0x2c, 0x1f, 0xe5,
            0xd8, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01, 0x67, 0x41,
            0x50, 0x5f, 0x42, 0x4c, 0x33, 0x31, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07,
            0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c,
            0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02,
            0x58, 0x20, 0x2e, 0x6d, 0x31, 0xa5, 0x98, 0x3a, 0x91, 0x25, 0x1b, 0xfa, 0xe5, 0xae,
            0xfa, 0x1c, 0x0a, 0x19, 0xd8, 0xba, 0x3c, 0xf6, 0x01, 0xd0, 0xe8, 0xa7, 0x06, 0xb4,
            0xcf, 0xa9, 0x66, 0x1a, 0x6b, 0x8a, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35,
            0x36, 0xa4, 0x01, 0x63, 0x52, 0x4d, 0x4d, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63,
            0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41,
            0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3,
            0x02, 0x58, 0x20, 0xa1, 0xfb, 0x50, 0xe6, 0xc8, 0x6f, 0xae, 0x16, 0x79, 0xef, 0x33,
            0x51, 0x29, 0x6f, 0xd6, 0x71, 0x34, 0x11, 0xa0, 0x8c, 0xf8, 0xdd, 0x17, 0x90, 0xa4,
            0xfd, 0x05, 0xfa, 0xe8, 0x68, 0x81, 0x64, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32,
            0x35, 0x36, 0xa4, 0x01, 0x69, 0x48, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
            0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b,
            0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22,
            0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x1a, 0x25, 0x24, 0x02,
            0x97, 0x2f, 0x60, 0x57, 0xfa, 0x53, 0xcc, 0x17, 0x2b, 0x52, 0xb9, 0xff, 0xca, 0x69,
            0x8e, 0x18, 0x31, 0x1f, 0xac, 0xd0, 0xf3, 0xb0, 0x6e, 0xca, 0xae, 0xf7, 0x9e, 0x17,
            0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01, 0x69, 0x46, 0x57,
            0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63,
            0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41,
            0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3,
            0x02, 0x58, 0x20, 0x9a, 0x92, 0xad, 0xbc, 0x0c, 0xee, 0x38, 0xef, 0x65, 0x8c, 0x71,
            0xce, 0x1b, 0x1b, 0xf8, 0xc6, 0x56, 0x68, 0xf1, 0x66, 0xbf, 0xb2, 0x13, 0x64, 0x4c,
            0x89, 0x5c, 0xcb, 0x1a, 0xd0, 0x7a, 0x25, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32,
            0x35, 0x36, 0xa4, 0x01, 0x6c, 0x54, 0x42, 0x5f, 0x46, 0x57, 0x5f, 0x43, 0x4f, 0x4e,
            0x46, 0x49, 0x47, 0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3,
            0xec, 0x8d, 0x8b, 0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60,
            0xcf, 0xe3, 0x22, 0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0x23,
            0x89, 0x03, 0x18, 0x0c, 0xc1, 0x04, 0xec, 0x2c, 0x5d, 0x8b, 0x3f, 0x20, 0xc5, 0xbc,
            0x61, 0xb3, 0x89, 0xec, 0x0a, 0x96, 0x7d, 0xf8, 0xcc, 0x20, 0x8c, 0xdc, 0x7c, 0xd4,
            0x54, 0x17, 0x4f, 0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0xa4, 0x01,
            0x6d, 0x53, 0x4f, 0x43, 0x5f, 0x46, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
            0x05, 0x58, 0x20, 0x53, 0x78, 0x79, 0x63, 0x07, 0x53, 0x5d, 0xf3, 0xec, 0x8d, 0x8b,
            0x15, 0xa2, 0xe2, 0xdc, 0x56, 0x41, 0x41, 0x9c, 0x3d, 0x30, 0x60, 0xcf, 0xe3, 0x22,
            0x38, 0xc0, 0xfa, 0x97, 0x3f, 0x7a, 0xa3, 0x02, 0x58, 0x20, 0xe6, 0xc2, 0x1e, 0x8d,
            0x26, 0x0f, 0xe7, 0x18, 0x82, 0xde, 0xbd, 0xb3, 0x39, 0xd2, 0x40, 0x2a, 0x2c, 0xa7,
            0x64, 0x85, 0x29, 0xbc, 0x23, 0x03, 0xf4, 0x86, 0x49, 0xbc, 0xe0, 0x38, 0x00, 0x17,
            0x06, 0x67, 0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0x58, 0x60, 0x21, 0x51, 0x20,
            0x92, 0xd6, 0xd0, 0x2a, 0xe6, 0xbe, 0x2f, 0xe3, 0x93, 0x0e, 0xa5, 0x1f, 0xd6, 0x98,
            0x96, 0x32, 0x24, 0x56, 0xe9, 0xdf, 0xc7, 0x32, 0x5e, 0x0b, 0x78, 0x68, 0xb6, 0x90,
            0x73, 0x2a, 0x0c, 0x0f, 0x07, 0x77, 0xc1, 0x15, 0x40, 0x4b, 0xe1, 0xfc, 0x83, 0x9b,
            0x7d, 0x30, 0x4f, 0x4f, 0xe6, 0xfa, 0x46, 0xae, 0x12, 0xa3, 0x08, 0x3a, 0xcf, 0x24,
            0x06, 0x67, 0x91, 0x06, 0xbf, 0xae, 0x50, 0x31, 0x79, 0xdd, 0x50, 0x33, 0x49, 0x12,
            0xbf, 0xc6, 0xda, 0x33, 0x6d, 0xd6, 0x18, 0x25, 0x43, 0x54, 0x4d, 0xb5, 0x88, 0xd6,
            0xae, 0x67, 0x35, 0x7a, 0xfd, 0xb0, 0x5f, 0x95, 0xb7, 0x19, 0xac, 0xd1, 0x59, 0x02,
            0x23, 0xd2, 0x84, 0x44, 0xa1, 0x01, 0x38, 0x22, 0xa0, 0x59, 0x01, 0xb6, 0xa7, 0x0a,
            0x58, 0x40, 0x6e, 0x86, 0xd6, 0xd9, 0x7c, 0xc7, 0x13, 0xbc, 0x6d, 0xd4, 0x3d, 0xbc,
            0xe4, 0x91, 0xa6, 0xb4, 0x03, 0x11, 0xc0, 0x27, 0xa8, 0xbf, 0x85, 0xa3, 0x9d, 0xa6,
            0x3e, 0x9c, 0xe4, 0x4c, 0x13, 0x2a, 0x8a, 0x11, 0x9d, 0x29, 0x6f, 0xae, 0x6a, 0x69,
            0x99, 0xe9, 0xbf, 0x3e, 0x44, 0x71, 0xb0, 0xce, 0x01, 0x24, 0x5d, 0x88, 0x94, 0x24,
            0xc3, 0x1e, 0x89, 0x79, 0x3b, 0x3b, 0x1d, 0x6b, 0x15, 0x04, 0x19, 0xac, 0xcc, 0x67,
            0x73, 0x68, 0x61, 0x2d, 0x32, 0x35, 0x36, 0x19, 0xac, 0xd0, 0x67, 0x73, 0x68, 0x61,
            0x2d, 0x32, 0x35, 0x36, 0x19, 0xac, 0xcb, 0x58, 0x40, 0x54, 0x68, 0x65, 0x20, 0x71,
            0x75, 0x69, 0x63, 0x6b, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f, 0x78,
            0x20, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x31, 0x33,
            0x20, 0x6c, 0x61, 0x7a, 0x79, 0x20, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x68, 0x65,
            0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x6e, 0x20, 0x66,
            0x6f, 0x78, 0x20, 0x19, 0xac, 0xcd, 0x58, 0x61, 0x04, 0x76, 0xf9, 0x88, 0x09, 0x1b,
            0xe5, 0x85, 0xed, 0x41, 0x80, 0x1a, 0xec, 0xfa, 0xb8, 0x58, 0x54, 0x8c, 0x63, 0x05,
            0x7e, 0x16, 0xb0, 0xe6, 0x76, 0x12, 0x0b, 0xbd, 0x0d, 0x2f, 0x9c, 0x29, 0xe0, 0x56,
            0xc5, 0xd4, 0x1a, 0x01, 0x30, 0xeb, 0x9c, 0x21, 0x51, 0x78, 0x99, 0xdc, 0x23, 0x14,
            0x6b, 0x28, 0xe1, 0xb0, 0x62, 0xbd, 0x3e, 0xa4, 0xb3, 0x15, 0xfd, 0x21, 0x9f, 0x1c,
            0xbb, 0x52, 0x8c, 0xb6, 0xe7, 0x4c, 0xa4, 0x9b, 0xe1, 0x67, 0x73, 0x73, 0x4f, 0x61,
            0xa1, 0xca, 0x61, 0x03, 0x1b, 0x2b, 0xbf, 0x3d, 0x91, 0x8f, 0x2f, 0x94, 0xff, 0xc4,
            0x22, 0x8e, 0x50, 0x91, 0x95, 0x44, 0xae, 0x19, 0xac, 0xce, 0x58, 0x20, 0x31, 0x13,
            0x14, 0xab, 0x73, 0x62, 0x03, 0x50, 0xcf, 0x75, 0x88, 0x34, 0xae, 0x5c, 0x65, 0xd9,
            0xe8, 0xc2, 0xdc, 0x7f, 0xeb, 0xe6, 0xe7, 0xd9, 0x65, 0x4b, 0xbe, 0x86, 0x4e, 0x30,
            0x0d, 0x49, 0x19, 0xac, 0xcf, 0x84, 0x58, 0x20, 0x24, 0xd5, 0xb0, 0xa2, 0x96, 0xcc,
            0x05, 0xcb, 0xd8, 0x06, 0x8c, 0x50, 0x67, 0xc5, 0xbd, 0x47, 0x3b, 0x77, 0x0d, 0xda,
            0x6a, 0xe0, 0x82, 0xfe, 0x3b, 0xa3, 0x0a, 0xbe, 0x3f, 0x9a, 0x6a, 0xb1, 0x58, 0x20,
            0x78, 0x8f, 0xc0, 0x90, 0xbf, 0xc6, 0xb8, 0xed, 0x90, 0x31, 0x52, 0xba, 0x84, 0x14,
            0xe7, 0x3d, 0xaf, 0x5b, 0x8c, 0x7b, 0xb1, 0xe7, 0x9a, 0xd5, 0x02, 0xab, 0x06, 0x99,
            0xb6, 0x59, 0xed, 0x16, 0x58, 0x20, 0xda, 0xc4, 0x6a, 0x58, 0x41, 0x5d, 0xc3, 0xa0,
            0x0d, 0x7a, 0x74, 0x18, 0x52, 0x00, 0x8e, 0x9c, 0xae, 0x64, 0xf5, 0x2d, 0x03, 0xb9,
            0xf7, 0x6d, 0x76, 0xf4, 0xb3, 0x64, 0x4f, 0xef, 0xc4, 0x16, 0x58, 0x20, 0x32, 0xc6,
            0xaf, 0xc6, 0x27, 0xe5, 0x55, 0x85, 0xc0, 0x31, 0x55, 0x35, 0x9f, 0x33, 0x1a, 0x0e,
            0x22, 0x5f, 0x68, 0x40, 0xdb, 0x94, 0x7d, 0xd9, 0x6e, 0xfa, 0xb8, 0x1b, 0xe2, 0x67,
            0x19, 0x39, 0x58, 0x60, 0x6e, 0xaf, 0x8c, 0x12, 0xcd, 0x0f, 0xc0, 0xd6, 0x2b, 0x3d,
            0x3b, 0x84, 0xa1, 0x6a, 0x6b, 0x76, 0x28, 0xdb, 0xc8, 0xe3, 0x46, 0xfb, 0x9f, 0x09,
            0x44, 0xda, 0x5a, 0x81, 0xd0, 0x09, 0x32, 0x33, 0x9c, 0x6d, 0x6b, 0xd1, 0xf8, 0x91,
            0xea, 0x64, 0xc0, 0xb0, 0x42, 0xf5, 0x1c, 0xa3, 0x31, 0x87, 0xed, 0xbb, 0xe7, 0xf0,
            0xa3, 0x95, 0x98, 0x55, 0x06, 0x89, 0x09, 0x3b, 0x0d, 0x99, 0xbb, 0xf3, 0x8e, 0x93,
            0x2c, 0x5e, 0x2e, 0x18, 0x26, 0xc4, 0xdb, 0xc3, 0xed, 0x3e, 0x49, 0x44, 0x18, 0xb0,
            0x4f, 0x79, 0x1d, 0x88, 0xda, 0x64, 0xec, 0x3a, 0x3f, 0x16, 0x50, 0x96, 0x51, 0xe7,
            0x30, 0x97,
        ],
        // This is a CCA EAT profile token
        "application/eat-collection; profile=http://arm.com/CCA-SSD/1.0.0".to_string(),
    ))
}

fn main() {
    // Use the Linaro Veraison verifier by default
    let base_url = "http://veraison.test.linaro.org:8080";

    // Get the discovery URL from the base URL
    let discovery = Discovery::from_base_url(String::from(base_url))
        .expect("Failed to start API discovery with the service.");

    // Quiz the discovery endpoint for the verification endpoint
    let verification_api = discovery
        .get_verification_api()
        .expect("Failed to discover the verification endpoint details.");

    // Get the challenge-response endpoint from the verification endpoint
    let relative_endpoint = verification_api
        .get_api_endpoint("newChallengeResponseSession")
        .expect("Could not locate a newChallengeResponseSession endpoint.");

    let api_endpoint = format!("{}{}", base_url, relative_endpoint);

    // create a ChallengeResponse object
    let cr = ChallengeResponseBuilder::new()
        .with_new_session_url(api_endpoint)
        .build()
        .unwrap();

    // We're faking this with a pre-baked token, so we can't let the server challenge us. We
    // have to pre-agree the nonce, otherwise the submitted token will fail its integrity
    // check.
    // This is the challenge value from from https://git.trustedfirmware.org/TF-M/tf-m-tools/+/refs/heads/main/iat-verifier/tests/data/cca_example_token.cbor
    let nonce = Nonce::Value(vec![
        0x6e, 0x86, 0xd6, 0xd9, 0x7c, 0xc7, 0x13, 0xbc, 0x6d, 0xd4, 0x3d, 0xbc, 0xe4, 0x91, 0xa6,
        0xb4, 0x03, 0x11, 0xc0, 0x27, 0xa8, 0xbf, 0x85, 0xa3, 0x9d, 0xa6, 0x3e, 0x9c, 0xe4, 0x4c,
        0x13, 0x2a, 0x8a, 0x11, 0x9d, 0x29, 0x6f, 0xae, 0x6a, 0x69, 0x99, 0xe9, 0xbf, 0x3e, 0x44,
        0x71, 0xb0, 0xce, 0x01, 0x24, 0x5d, 0x88, 0x94, 0x24, 0xc3, 0x1e, 0x89, 0x79, 0x3b, 0x3b,
        0x1d, 0x6b, 0x15, 0x04,
    ]);

    // Run the challenge-response session
    let ear = cr.run(nonce, my_evidence_builder);

    // let ear : Result<String, Error> = Ok("eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXIudmVyaWZpZXItaWQiOnsiYnVpbGQiOiJOL0EiLCJkZXZlbG9wZXIiOiJWZXJhaXNvbiBQcm9qZWN0In0sImVhdF9ub25jZSI6IlFVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFnPT0iLCJlYXRfcHJvZmlsZSI6InRhZzpnaXRodWIuY29tLDIwMjM6dmVyYWlzb24vZWFyIiwiaWF0IjoxNzE0MzE3Njc0LCJzdWJtb2RzIjp7IkNDQV9TU0RfUExBVEZPUk0iOnsiZWFyLmFwcHJhaXNhbC1wb2xpY3ktaWQiOiJwb2xpY3k6Q0NBX1NTRF9QTEFURk9STSIsImVhci5zdGF0dXMiOiJ3YXJuaW5nIiwiZWFyLnRydXN0d29ydGhpbmVzcy12ZWN0b3IiOnsiY29uZmlndXJhdGlvbiI6MzIsImV4ZWN1dGFibGVzIjoyLCJmaWxlLXN5c3RlbSI6MCwiaGFyZHdhcmUiOjIsImluc3RhbmNlLWlkZW50aXR5IjoyLCJydW50aW1lLW9wYXF1ZSI6Miwic291cmNlZC1kYXRhIjowLCJzdG9yYWdlLW9wYXF1ZSI6Mn0sImVhci52ZXJhaXNvbi5hbm5vdGF0ZWQtZXZpZGVuY2UiOnsicGxhdGZvcm0iOnsiY2NhLXBsYXRmb3JtLWNoYWxsZW5nZSI6IkJlYTFpRVRHb00wWk9DQnB1djJ3NUpSbUtqcmMrUDNoRkhqcE01VWE4WGtQOWQ1Y2VPUGJFU1BhQ2lCNmkyWlZiZ29pOFo3bVM5d3ZpWlU3YXpKVlh3PT0iLCJjY2EtcGxhdGZvcm0tY29uZmlnIjoiQVFJRCIsImNjYS1wbGF0Zm9ybS1oYXNoLWFsZ28taWQiOiJzaGEtMjU2IiwiY2NhLXBsYXRmb3JtLWltcGxlbWVudGF0aW9uLWlkIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0iLCJjY2EtcGxhdGZvcm0taW5zdGFuY2UtaWQiOiJBUUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQyIsImNjYS1wbGF0Zm9ybS1saWZlY3ljbGUiOjEyMjg4LCJjY2EtcGxhdGZvcm0tcHJvZmlsZSI6Imh0dHA6Ly9hcm0uY29tL0NDQS1TU0QvMS4wLjAiLCJjY2EtcGxhdGZvcm0tc2VydmljZS1pbmRpY2F0b3IiOiJodHRwczovL3ZlcmFpc29uLmV4YW1wbGUvdjEvY2hhbGxlbmdlLXJlc3BvbnNlIiwiY2NhLXBsYXRmb3JtLXN3LWNvbXBvbmVudHMiOlt7Im1lYXN1cmVtZW50LXR5cGUiOiJCTCIsIm1lYXN1cmVtZW50LXZhbHVlIjoiQndZRkJBTUNBUUFQRGcwTUN3b0pDQmNXRlJRVEVoRVFIeDRkSEJzYUdSZz0iLCJzaWduZXItaWQiOiJCd1lGQkFNQ0FRQVBEZzBNQ3dvSkNCY1dGUlFURWhFUUh4NGRIQnNhR1JnPSIsInZlcnNpb24iOiIzLjQuMiJ9LHsibWVhc3VyZW1lbnQtdHlwZSI6Ik0xIiwibWVhc3VyZW1lbnQtdmFsdWUiOiJDd1lGQkFNQ0FRQVBEZzBNQ3dvSkNCY1dGUlFURWhFUUh4NGRIQnNhR1JnPSIsInNpZ25lci1pZCI6IkJ3WUZCQU1DQVFBUERnME1Dd29KQ0JjV0ZSUVRFaEVRSHg0ZEhCc2FHUmc9IiwidmVyc2lvbiI6IjEuMi4wIn0seyJtZWFzdXJlbWVudC10eXBlIjoiTTIiLCJtZWFzdXJlbWVudC12YWx1ZSI6IkR3WUZCQU1DQVFBUERnME1Dd29KQ0JjV0ZSUVRFaEVRSHg0ZEhCc2FHUmc9Iiwic2lnbmVyLWlkIjoiQndZRkJBTUNBUUFQRGcwTUN3b0pDQmNXRlJRVEVoRVFIeDRkSEJzYUdSZz0iLCJ2ZXJzaW9uIjoiMS4yLjMifSx7Im1lYXN1cmVtZW50LXR5cGUiOiJNMyIsIm1lYXN1cmVtZW50LXZhbHVlIjoiRXdZRkJBTUNBUUFQRGcwTUN3b0pDQmNXRlJRVEVoRVFIeDRkSEJzYUdSZz0iLCJzaWduZXItaWQiOiJCd1lGQkFNQ0FRQVBEZzBNQ3dvSkNCY1dGUlFURWhFUUh4NGRIQnNhR1JnPSIsInZlcnNpb24iOiIxLjAuMCJ9XX0sInJlYWxtIjp7ImNjYS1yZWFsbS1jaGFsbGVuZ2UiOiJRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRa0ZDUVVKQlFrRkNRVUpCUWtGQ1FVSkJRZz09IiwiY2NhLXJlYWxtLWV4dGVuc2libGUtbWVhc3VyZW1lbnRzIjpbIlEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFF3PT0iLCJRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRdz09IiwiUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUXc9PSIsIlEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFF3PT0iXSwiY2NhLXJlYWxtLWhhc2gtYWxnby1pZCI6InNoYS0yNTYiLCJjY2EtcmVhbG0taW5pdGlhbC1tZWFzdXJlbWVudCI6IlEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFEwTkRRME5EUTBORFF3PT0iLCJjY2EtcmVhbG0tcGVyc29uYWxpemF0aW9uLXZhbHVlIjoiUVVSQlJFRkVRVVJCUkVGRVFVUkJSRUZFUVVSQlJFRkVRVVJCUkVGRVFVUkJSRUZFUVVSQlJFRkVRVVJCUkVGRVFVUkJSRUZFUVVSQlJFRkVRVVJCUkE9PSIsImNjYS1yZWFsbS1wdWJsaWMta2V5IjoiQklMNzBUS3B0Y09XaDUrN0ZUUU5rRkNYamxYSG5WSjVvcm9PbFlWUE4rSU0wdlpQTzNLMWNMdlhjKzdpem5hRUplMzFSZTIraWYrdjRPbHJ2VWJpY1BJSGxzUkl1WTJ2UnFkazBuUkM1dWJ0aFBqT3lCZm03TWFuSFRvOTU5Wit6UT09IiwiY2NhLXJlYWxtLXB1YmxpYy1rZXktaGFzaC1hbGdvLWlkIjoic2hhLTUxMiJ9fX19fQ.1d3nRI5oUYG0Mjx6L1veyw_IQilioDtQEjSpmHvPyRsNupcHJwfN-0CpfQ9Qf3FW5Q8GBIdJhPcMgo-LisTDBA".to_string());
    match ear {
        Err(e) => println!(
            "Failed to get an attestation response from the server: {}",
            e
        ),
        Ok(ear) => {
            // We have an attestation result (EAR), which we can start to evaluate
            println!(
                "Attestation result from Veraison verification endpoint: {}",
                ear
            );

            // EARs are signed by Veraison. The public verification key is conveyed within the
            // endpoint descriptor that we pulled from the discovery API before. We can grab this
            // as a JSON string, which will allow us to start using the rust-ear library to
            // parse and inspect the EAR token.
            let verification_key_string = verification_api.ear_verification_key_as_string();

            // We've finished talking to Veraison at this point. The rest of the code is concerned with
            // locally inspecting the EAR. We now start using the rust-ear library
            // from https://github.com/veraison/rust-ear
            // We start by getting the Ear structure from the JWT, which also does a signature
            // check.
            let token =
                Ear::from_jwt_jwk(&ear, Algorithm::ES256, verification_key_string.as_bytes())
                    .unwrap();
            println!("EAR profiles: {}", token.profile);

            // Walk the sub-modules and print their appraisal status
            for (module, appraisal) in token.submods.iter() {
                println!("Appraisal for submod {}:", module);
                println!("    Status: {:?}", appraisal.status);
                println!("    Annotated Evidence:");
                for (ek, ev) in appraisal.annotated_evidence.iter() {
                    println!("        {}: {:?}", ek, ev);
                }
                println!("    Policy Claims:");
                for (pk, pv) in appraisal.policy_claims.iter() {
                    println!("        {}: {:?}", pk, pv);
                }
            }
        }
    }
}
